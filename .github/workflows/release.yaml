# Tag based release.
# Build and publish to github
# using the provided tag as the version.
#
# Only works on selected branches
#

name: release via tag

on:
  push:
    tags:
      - "v-*"
env:
  PackTarget: src/kwd.CoreUtil
  PackBranches: "master,Development,build"

jobs:
  check:
    name: 'check is valid branch'
    runs-on: ubuntu-latest
    outputs:
      build_version: ${{steps.check_branch.outputs.build_version}}
      is_preview: ${{steps.check_branch.outputs.is_preview}}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: check_branch
        id: check_branch
        shell: pwsh
        run: |
          $tagBranches = "$(git branch -r --contains ${{github.ref}})"
          $allowed = "${{env.PackBranches}}" -split ','
          
          foreach($item in $allowed){
            if($tagBranches.Contains($item)){
              $relVersion = "${{github.ref_name}}".Substring(2);
              
              $isPreview = if($relVersion.Contains("-")){'true'}else{'false'};

              echo build_version=$relVersion >> $env:GITHUB_OUTPUT
              echo is_preview=$isPreview >> $env:GITHUB_OUTPUT
              
              echo "Allow building release - $relVersion"
              echo "Is Preview $isPreview"
              return;
            }
          }
          echo build_version="" >> $env:GITHUB_OUTPUT
          echo Deny
      
      - name: results
        run: |
          echo BuildVersion - ${{steps.check_branch.outputs.build_version}}
          echo IsPreview - ${{steps.check_branch.outputs.is_preview}}
  build:
    runs-on: ubuntu-latest
    name: "Build release package"
    needs: "check"
    if: needs.check.outputs.build_version != ''
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          6.0.x
          7.0.x
    - name: Restore dependencies
      run: dotnet restore --locked-mode src/

    - name: Pack
      run: >
        dotnet pack 
        -c Release 
        --include-symbols
        ${{env.PackTarget}}
        -p:ContinuousIntegrationBuild=true 
        -p PackageVersion=${{needs.check.outputs.build_version}}
        -o packages
    
    - name: Prep github push source
      run: > 
        dotnet nuget add source 
        --username dkowald 
        --password ${{ secrets.GITHUB_TOKEN }} 
        --store-password-in-clear-text 
        --name github "https://nuget.pkg.github.com/dkowald/index.json"

    - name: Push package to github
      run: dotnet nuget push "./packages/*.*pkg" --source "github"

    - name: Create release
      uses: ncipollo/release-action@v1      
      with:
        draft: true
        prerelease: ${{needs.check.outputs.is_preview}}
        artifacts: "./packages/*"
   